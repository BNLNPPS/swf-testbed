; ===============================================================================
;  SWF Testbed Supervisor Configuration
; ===============================================================================
;
; ONBOARDING & AUTOMATION PRINCIPLES:
;   - This project uses a unified Python virtual environment (see setup.sh).
;   - You MUST run 'source setup_env.sh' in your shell before starting supervisord.
;   - The SWF_HOME (ENV_SWF_HOME) environment variable is set by setup_env.sh and
;     is used to parameterize agent/service directories.
;   - AUTOMATION: Supervisor configs and scripts are designed to be robust:
;       * If an agent/service repo is not checked out, its supervisor block will not cause errors.
;       * If the logs/ directory is missing, it will be auto-created by setup scripts or at runtime.
;   - For adding new agents/services, use the existing blocks as templates.
;
; For more, see the README Prompt Tips and onboarding sections.
; ===============================================================================

[unix_http_server]
file=%(here)s/supervisor.sock   ; Path to the socket file in the project dir
;file=/tmp/supervisor.sock      ; Alternative: path to a temp socket file

[supervisord]
logfile=%(here)s/logs/supervisord.log ; Main log file for supervisord
pidfile=%(here)s/supervisord.pid      ; PID file for supervisord process
childlogdir=%(here)s/logs            ; Directory for child process log files
nodaemon=false                 ; Run supervisord in the background
minfds=1024                    ; Minimum available file descriptors
minprocs=200                   ; Minimum available process descriptors

; By default, supervisord will run programs as the user that starts it.
; If you run supervisord as root, you may need to uncomment the following line
; and set it to your non-root user to avoid permission issues.
; user=your_username

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix://%(here)s/supervisor.sock ; URL for supervisorctl to connect

; ==============================================================================
;  Program Definitions
; ==============================================================================
;
; All programs use the Python executable from the unified virtual environment
; created by the setup.sh script.
;
; The 'directory' for each program is parameterized using the SWF_HOME
; environment variable, which is set by sourcing 'setup_env.sh'.
; You MUST run 'source setup_env.sh' in your shell before starting supervisord.
;
; Common settings for most agents:
;   autostart=true
;   autorestart=true
;   stopsignal=QUIT  (graceful shutdown for many Python apps)
;   stdout_logfile=%(here)s/logs/%(program_name)s.log
;   stderr_logfile=%(here)s/logs/%(program_name)s.log
;
; ------------------------------------------------------------------------------

[program:swf-daqsim-agent]
command=%(here)s/venv/bin/python -m swf_daqsim_agent.main
directory=%(ENV_SWF_HOME)s/swf-daqsim-agent ; Path to this agent's directory
autostart=true
autorestart=true
stdout_logfile=%(here)s/logs/%(program_name)s.log
stderr_logfile=%(here)s/logs/%(program_name)s.log
stopsignal=QUIT

[program:swf-data-agent]
command=%(here)s/venv/bin/python -m swf_data_agent.main
directory=%(ENV_SWF_HOME)s/swf-data-agent ; Path to this agent's directory
autostart=true
autorestart=true
stdout_logfile=%(here)s/logs/%(program_name)s.log
stderr_logfile=%(here)s/logs/%(program_name)s.log
stopsignal=QUIT

[program:swf-processing-agent]
command=%(here)s/venv/bin/python -m swf_processing_agent.main
directory=%(ENV_SWF_HOME)s/swf-processing-agent ; Path to this agent's directory
autostart=true
autorestart=true
stdout_logfile=%(here)s/logs/%(program_name)s.log
stderr_logfile=%(here)s/logs/%(program_name)s.log
stopsignal=QUIT

[program:swf-fastmon-agent]
command=%(here)s/venv/bin/python -m swf_fastmon_agent.main
directory=%(ENV_SWF_HOME)s/swf-fastmon-agent ; Path to this agent's directory
autostart=true
autorestart=true
stdout_logfile=%(here)s/logs/%(program_name)s.log
stderr_logfile=%(here)s/logs/%(program_name)s.log
stopsignal=QUIT

[program:swf-mcp-agent]
command=%(here)s/venv/bin/python -m swf_mcp_agent.main
directory=%(ENV_SWF_HOME)s/swf-mcp-agent ; Path to this agent's directory
autostart=true
autorestart=true
stdout_logfile=%(here)s/logs/%(program_name)s.log
stderr_logfile=%(here)s/logs/%(program_name)s.log
stopsignal=QUIT

; --- swf-monitor services ---
; These three services make up the monitoring application.

[program:swf-monitor-web]
command=%(here)s/venv/bin/python manage.py runserver 0.0.0.0:8000
directory=%(ENV_SWF_HOME)s/swf-monitor/src
autostart=true
autorestart=true
stdout_logfile=%(here)s/logs/%(program_name)s.log
stderr_logfile=%(here)s/logs/%(program_name)s.log
stopsignal=QUIT

[program:swf-monitor-daphne]
command=%(here)s/venv/bin/daphne -p 8001 swf_monitor_project.asgi:application
directory=%(ENV_SWF_HOME)s/swf-monitor/src
autostart=true
autorestart=true
stdout_logfile=%(here)s/logs/%(program_name)s.log
stderr_logfile=%(here)s/logs/%(program_name)s.log
stopsignal=QUIT

[program:swf-monitor-activemq]
command=%(here)s/venv/bin/python manage.py listen_activemq
directory=%(ENV_SWF_HOME)s/swf-monitor/src
autostart=true
autorestart=true
stdout_logfile=%(here)s/logs/%(program_name)s.log
stderr_logfile=%(here)s/logs/%(program_name)s.log
stopsignal=QUIT

; ==============================================================================
;  Group Definitions
; ==============================================================================
;
; Groups allow you to manage multiple processes as a single unit.
; Example commands:
;   supervisorctl start all
;   supervisorctl stop monitor:*
;   supervisorctl status

[group:monitor]
programs=swf-monitor-web,swf-monitor-daphne,swf-monitor-activemq
priority=10

[group:agents]
programs=swf-daqsim-agent,swf-data-agent,swf-processing-agent,swf-fastmon-agent,swf-mcp-agent
priority=20
